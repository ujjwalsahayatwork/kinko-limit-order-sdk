{"version":3,"file":"limit-order-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/enums.ts","../src/types.ts","../src/eip712.ts","../src/limitorder.ts"],"sourcesContent":["import { AddressMap, ChainId } from '@sushiswap/core-sdk'\n\nexport const LAMBDA_URL = 'https://limit-order-ffo5rqmjnq-uc.a.run.app'\n\nexport const SOCKET_URL = 'wss://limit-order-ffo5rqmjnq-uc.a.run.app'\n\nexport const STOP_LIMIT_ORDER_ADDRESS: AddressMap = {\n  [ChainId.KOVAN]: '0xce9365dB1C99897f04B3923C03ba9a5f80E8DB87',\n  [ChainId.MATIC]: '0x1aDb3Bd86bb01797667eC382a0BC6A9854b4005f',\n  [ChainId.AVALANCHE]: '0xf6f9c9DB78AF5791A296c4bF34d59E0236E990E0',\n  [ChainId.FANTOM]: '0x0dd184Bec9e43701F76d75D5FFfE246B2DC8d4EA',\n  [ChainId.ETHEREUM]: '0x104734Ce12567421aC7B562e03Be2D75522cd112',\n  [ChainId.BSC_TESTNET]: '0x0bbDC097338f2D3B77f9440CB4Dc49f0905be86f',\n\n}\n\nexport const DEFAULT_RECEIVER_ADDRESS: AddressMap = {\n  [ChainId.MATIC]: '0x8C6b2e5B8028825d371E1264f57C5CcaE0fa4D65',\n  [ChainId.AVALANCHE]: '0x042c99C84b00f11A08a07AA9752E083261083A57',\n  [ChainId.FANTOM]: '0x7a4f6a6Ca48Bf63C53DfF622bfa8E0DbA1c7A8c6',\n  [ChainId.ETHEREUM]: '0xf4943f2dEc7E4914067CdF4120E8A322bc8f5a36',\n  [ChainId.BSC_TESTNET]: '0x67Ba2cBb913243cc44747f8429FA072be3078BD5',\n\n}\n\nexport const ADVANCED_RECEIVER_ADDRESS: AddressMap = {\n  [ChainId.MATIC]: '0xAA6370CD78A61D4e72911268D84bF1Ea6a976b77',\n  [ChainId.AVALANCHE]: '0x50995361A1104B2E34d81771B2cf19BA55051C7c',\n  [ChainId.FANTOM]: '0x506e3ce419976E91F2ca5BDAB96Ef253Df9dAD3b',\n  [ChainId.ETHEREUM]: '0xA32e906C31093aDbe581B913e549f70fD2fD7969',\n  [ChainId.BSC_TESTNET]: '0x28128508C11289D3e43B72A8dFE8a678a13B96cA',\n\n}\n\nexport const LIMIT_ORDER_HELPER_ADDRESS: AddressMap = {\n  [ChainId.MATIC]: '0xe2f736B7d1f6071124CBb5FC23E93d141CD24E12',\n  [ChainId.AVALANCHE]: '0x889ec9e19C1598358899fCA4879011686c3d4045',\n  [ChainId.FANTOM]: '0xBf28dD7C3B863eae035eBf535B1B214070E8ddBf',\n  [ChainId.ETHEREUM]: '0x75a5263bddD871E94188611f3563aabc833Cc005',\n  [ChainId.BSC_TESTNET]: '0xF7A11b638E788e64A0473E2b905bb270B1B22715',\n\n}\n\nexport const ROUND_UP_RECEIVER_ADDRESS: AddressMap = {\n  [ChainId.MATIC]: '0x1C9B033F8C46C08EbE67F15924F5B9E97e36E0a7',\n}\n","export enum OrderStatus {\n  FILLED = 'FILLED',\n  CANCELLED = 'CANCELLED',\n  EXPIRED = 'EXPIRED',\n  PENDING = 'PENDING',\n}\n","export const types = {\n  EIP712Domain: [\n    { name: 'name', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' },\n  ],\n  LimitOrder: [\n    { name: 'maker', type: 'address' },\n    { name: 'tokenIn', type: 'address' },\n    { name: 'tokenOut', type: 'address' },\n    { name: 'amountIn', type: 'uint256' },\n    { name: 'amountOut', type: 'uint256' },\n    { name: 'recipient', type: 'address' },\n    { name: 'startTime', type: 'uint256' },\n    { name: 'endTime', type: 'uint256' },\n    { name: 'stopPrice', type: 'uint256' },\n    { name: 'oracleAddress', type: 'address' },\n    { name: 'oracleData', type: 'bytes32' },\n  ],\n}\n\nexport const bentoTypes = {\n  EIP712Domain: [\n    { name: 'name', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' },\n  ],\n  SetMasterContractApproval: [\n    { name: 'warning', type: 'string' },\n    { name: 'user', type: 'address' },\n    { name: 'masterContract', type: 'address' },\n    { name: 'approved', type: 'bool' },\n    { name: 'nonce', type: 'uint256' },\n  ],\n}\nexport const name = 'LimitOrder'\n","import { BENTOBOX_ADDRESS, ChainId } from '@sushiswap/core-sdk'\nimport { bentoTypes, name, types } from './types'\n\nimport { STOP_LIMIT_ORDER_ADDRESS } from './constants'\nimport { SigningKey } from '@ethersproject/signing-key'\nimport { Web3Provider } from '@ethersproject/providers'\nimport { getMessage } from 'eip-712'\nimport { splitSignature } from '@ethersproject/bytes'\n\nexport interface Domain {\n  name: string\n  chainId: ChainId\n  verifyingContract: string\n}\n\nexport interface Message {\n  maker: string\n  tokenIn: string\n  tokenOut: string\n  amountIn: string\n  amountOut: string\n  recipient: string\n  startTime: string\n  endTime: string\n  stopPrice: string\n  oracleAddress: string\n  oracleData: string\n}\n\nexport interface BentoApprovalMessage {\n  warning: string\n  user: string\n  masterContract: string\n  approved: boolean\n  nonce: number\n}\n\nexport const getSignature = (message: Message, chainId: ChainId, privateKey: string) => {\n  let domain: Domain = {\n    name: name,\n    chainId: chainId,\n    verifyingContract: STOP_LIMIT_ORDER_ADDRESS[chainId],\n  }\n  return sign({ types, primaryType: 'LimitOrder', domain, message }, privateKey)\n}\n\nexport const getTypedData = (message: Message, chainId: ChainId) => {\n  let domain: Domain = {\n    name: name,\n    chainId: chainId,\n    verifyingContract: STOP_LIMIT_ORDER_ADDRESS[chainId],\n  }\n  return { types, primaryType: 'LimitOrder', domain, message }\n}\n\nexport const getTypedDataBento = (message: BentoApprovalMessage, chainId: ChainId) => {\n  let domain: Domain = {\n    name: 'BentoBox V1',\n    chainId: chainId,\n    verifyingContract: BENTOBOX_ADDRESS[chainId],\n  }\n  return {\n    types: bentoTypes,\n    primaryType: 'SetMasterContractApproval',\n    domain,\n    message,\n  }\n}\n\nexport const getTypeHash = (typedData: any) => {\n  let message = getMessage(typedData, true).toString('hex')\n  return `0x${message}`\n}\n\nconst sign = (typedData: any, privateKey: string) => {\n  let message = getMessage(typedData, true)\n  const signingKey = new SigningKey(privateKey)\n  const { v, r, s } = signingKey.signDigest(message)\n  return { v, r, s }\n}\n\nexport const getSignatureWithProvider = async (\n  message: Message,\n  chainId: ChainId,\n  provider: Web3Provider\n): Promise<{ v: number; r: string; s: string }> => {\n  const typedData = getTypedData(message, chainId)\n  const signature = await provider.send('eth_signTypedData_v4', [message.maker, JSON.stringify(typedData)])\n  const { v, r, s } = splitSignature(signature)\n  return { v, r, s }\n}\n\nexport const getSignatureWithProviderBentobox = async (\n  message: BentoApprovalMessage,\n  chainId: ChainId,\n  provider: Web3Provider\n): Promise<{ v: number; r: string; s: string }> => {\n  const typedData = getTypedDataBento(message, chainId)\n  const signature = await provider.send('eth_signTypedData_v4', [message.user, JSON.stringify(typedData)])\n  const { v, r, s } = splitSignature(signature)\n  return { v, r, s }\n}\n\nexport const getSignatureBento = async (bentoApproval: BentoApprovalMessage, chainId: ChainId, privateKey: string) => {\n  let domain: Domain = {\n    name: 'BentoBox V1',\n    chainId: chainId,\n    verifyingContract: BENTOBOX_ADDRESS[chainId],\n  }\n  return sign(\n    {\n      types: bentoTypes,\n      primaryType: 'SetMasterContractApproval',\n      domain,\n      message: bentoApproval,\n    },\n    privateKey\n  )\n}\n","import { ChainId, CurrencyAmount, Price, Token, validateAndParseAddress } from '@sushiswap/core-sdk'\nimport { LAMBDA_URL, STOP_LIMIT_ORDER_ADDRESS } from './constants'\nimport { Message, getSignature, getSignatureWithProvider, getTypeHash, getTypedData } from './eip712'\n\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport { NonceManager } from '@ethersproject/experimental'\nimport { Signer } from '@ethersproject/abstract-signer'\nimport { Transaction } from '@ethersproject/transactions'\nimport { Web3Provider } from '@ethersproject/providers'\nimport abi from './abis/stop-limit-order.json'\nimport { defaultAbiCoder } from '@ethersproject/abi'\nimport fetch from 'isomorphic-unfetch'\nimport { keccak256 } from '@ethersproject/solidity'\n\nexport interface ILimitOrderData {\n  maker: string\n  tokenIn: string\n  tokenOut: string\n  tokenInDecimals: number\n  tokenOutDecimals: number\n  tokenInSymbol: string\n  tokenOutSymbol: string\n  amountIn: string\n  amountOut: string\n  recipient: string\n  startTime: string | number\n  endTime: string | number\n  stopPrice?: string\n  oracleAddress?: string\n  oracleData?: string\n  v: number\n  r: string\n  s: string\n  chainId: ChainId\n  orderTypeHash?: string\n}\n\nexport class LimitOrder {\n  public readonly maker: string\n  public readonly amountIn: CurrencyAmount<Token>\n  public readonly amountOut: CurrencyAmount<Token>\n  public readonly recipient: string\n  public readonly startTime: string\n  public readonly endTime: string\n  public readonly stopPrice: string\n  public readonly oracleAddress: string\n  public readonly oracleData: string\n  public v: number\n  public r: string\n  public s: string\n\n  static getLimitOrder(data: ILimitOrderData): LimitOrder {\n    return new LimitOrder(\n      data.maker,\n      CurrencyAmount.fromRawAmount(\n        new Token(data.chainId, data.tokenIn, data.tokenInDecimals, data.tokenInSymbol),\n        data.amountIn\n      ),\n      CurrencyAmount.fromRawAmount(\n        new Token(data.chainId, data.tokenOut, data.tokenOutDecimals, data.tokenOutSymbol),\n        data.amountOut\n      ),\n      data.recipient,\n      data.startTime,\n      data.endTime,\n      data.stopPrice,\n      data.oracleAddress,\n      data.oracleData,\n      data.v,\n      data.r,\n      data.s\n    )\n  }\n\n  constructor(\n    maker: string,\n    amountIn: CurrencyAmount<Token>,\n    amountOut: CurrencyAmount<Token>,\n    recipient: string,\n    startTime: string | number,\n    endTime: string | number,\n    stopPrice = '0',\n    oracleAddress = '0x0000000000000000000000000000000000000000',\n    oracleData = '0x00000000000000000000000000000000000000000000000000000000000000',\n    v = 0,\n    r = '',\n    s = ''\n  ) {\n    this.maker = validateAndParseAddress(maker)\n    this.amountIn = amountIn\n    this.amountOut = amountOut\n    this.recipient = validateAndParseAddress(recipient)\n    this.startTime = startTime.toString()\n    this.endTime = endTime.toString()\n    this.stopPrice = stopPrice\n    this.oracleAddress = validateAndParseAddress(oracleAddress)\n    this.oracleData = oracleData\n    this.v = v\n    this.r = r\n    this.s = s\n  }\n\n  get amountInRaw(): string {\n    return this.amountIn.quotient.toString()\n  }\n\n  get amountOutRaw(): string {\n    return this.amountOut.quotient.toString()\n  }\n\n  get tokenInAddress(): string {\n    return this.amountIn.currency.address\n  }\n\n  get tokenOutAddress(): string {\n    return this.amountOut.currency.address\n  }\n\n  get tokenInDecimals(): number {\n    return this.amountIn.currency.decimals\n  }\n\n  get tokenOutDecimals(): number {\n    return this.amountOut.currency.decimals\n  }\n\n  get tokenInSymbol(): string {\n    return this.amountIn.currency.symbol || ''\n  }\n\n  get tokenOutSymbol(): string {\n    return this.amountOut.currency.symbol || ''\n  }\n\n  get chainId(): ChainId {\n    return this.amountIn.currency.chainId\n  }\n\n  usePrice(price: Price<Token, Token>): LimitOrder {\n    return new LimitOrder(\n      this.maker,\n      this.amountIn,\n      CurrencyAmount.fromRawAmount(this.amountOut.currency, price.quote(this.amountIn).quotient.toString()),\n      this.recipient,\n      this.startTime,\n      this.endTime,\n      this.stopPrice,\n      this.oracleAddress,\n      this.oracleData\n    )\n  }\n\n  signdOrderWithPrivatekey(chainId: ChainId, privateKey: string) {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData]),\n    }\n\n    const { v, r, s } = getSignature(order, chainId, privateKey)\n\n    this.v = v\n    this.r = r\n    this.s = s\n\n    return { v, r, s }\n  }\n\n  async signOrderWithProvider(chainId: ChainId, provider: Web3Provider) {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData]),\n    }\n\n    const { v, r, s } = await getSignatureWithProvider(order, chainId, provider)\n\n    this.v = v\n    this.r = r\n    this.s = s\n\n    return { v, r, s }\n  }\n\n  getTypedData() {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData]),\n    }\n\n    return getTypedData(order, this.chainId)\n  }\n\n  getTypeHash() {\n    let typedData = this.getTypedData()\n    let digest = getTypeHash(typedData)\n    return digest\n  }\n\n  async send() {\n    const resp = await fetch(`${LAMBDA_URL}/orders/create`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        maker: this.maker,\n        tokenIn: this.tokenInAddress,\n        tokenOut: this.tokenOutAddress,\n        tokenInDecimals: this.tokenInDecimals,\n        tokenOutDecimals: this.tokenOutDecimals,\n        tokenInSymbol: this.tokenInSymbol,\n        tokenOutSymbol: this.tokenOutSymbol,\n        amountIn: this.amountInRaw,\n        amountOut: this.amountOutRaw,\n        recipient: this.recipient,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        stopPrice: this.stopPrice,\n        oracleAddress: this.oracleAddress,\n        oracleData: this.oracleData,\n        v: this.v,\n        r: this.r,\n        s: this.s,\n        chainId: this.amountIn.currency.chainId,\n      }),\n    })\n\n    return resp.json()\n  }\n}\n\nexport class FillLimitOrder {\n  public readonly order: LimitOrder\n  public readonly path: string[]\n  public readonly amountExternal: BigNumber\n  public readonly amountToFill: BigNumber\n  public readonly limitOrderReceiver: string\n  public readonly to: string\n  public readonly tokenIn: string\n  public readonly tokenOut: string\n  public readonly limitOrderReceiverData: string\n\n  constructor(\n    order: LimitOrder,\n    path: string[],\n    amountExternal: BigNumber,\n    amountToFill: BigNumber,\n    limitOrderReceiver: string,\n    to: string,\n    keepTokenIn = false\n  ) {\n    this.order = order\n    this.path = path.map(validateAndParseAddress)\n    this.amountExternal = amountExternal\n    this.amountToFill = amountToFill\n    this.limitOrderReceiver = validateAndParseAddress(limitOrderReceiver)\n    this.to = validateAndParseAddress(to)\n    this.tokenIn = order.amountIn.currency.address\n    this.tokenOut = order.amountOut.currency.address\n\n    this.limitOrderReceiverData = defaultAbiCoder.encode(\n      ['address[]', 'uint256', 'address', 'bool'],\n      [this.path, this.amountExternal.toString(), this.to, keepTokenIn]\n    )\n  }\n\n  public fillOrderOpen(\n    signer: Signer,\n    extra: {\n      forceExecution?: boolean\n      gasPrice?: BigNumber\n      nonce?: number\n      debug?: boolean\n      open?: boolean\n    }\n  ) {\n    extra.open = true\n    return this.fillOrder(signer, extra)\n  }\n\n  public async fillOrder(\n    signer: Signer | NonceManager,\n    extra: {\n      debug?: boolean\n      forceExecution?: boolean\n      gasPrice?: BigNumber\n      open?: boolean\n      nonce?: number\n    }\n  ): Promise<{ executed: boolean; transaction?: Transaction }> {\n    const { gasPrice, nonce, forceExecution = false, open = false } = extra\n\n    const func = open ? 'fillOrderOpen' : 'fillOrder'\n\n    const orderArg = [\n      this.order.maker,\n      this.order.amountInRaw,\n      this.order.amountOutRaw,\n      this.order.recipient,\n      this.order.startTime,\n      this.order.endTime,\n      this.order.stopPrice,\n      this.order.oracleAddress,\n      this.order.oracleData,\n      this.amountToFill.toString(),\n      this.order.v,\n      this.order.r,\n      this.order.s,\n    ]\n\n    const limitOrderContract = new Contract(STOP_LIMIT_ORDER_ADDRESS[this.order.chainId], abi, signer)\n\n    let gasLimit\n    let executed = true\n\n    if (extra.debug) console.log(orderArg, this.path, this.limitOrderReceiver, this.limitOrderReceiverData)\n\n    try {\n      gasLimit = await limitOrderContract.estimateGas[func](\n        orderArg,\n        this.path[0],\n        this.path[this.path.length - 1],\n        this.limitOrderReceiver,\n        this.limitOrderReceiverData\n      )\n      gasLimit = gasLimit.mul(11).div(10)\n    } catch (e) {\n      if (forceExecution) {\n        console.log('Failed to estimate gas, forcing execution')\n        gasLimit = BigNumber.from('400000') // 400k\n        executed = true\n      } else {\n        return { executed: false }\n      }\n    }\n\n    const transaction: Transaction = await limitOrderContract.fillOrder(\n      orderArg,\n      this.path[0],\n      this.path[this.path.length - 1],\n      this.limitOrderReceiver,\n      this.limitOrderReceiverData,\n      { gasLimit, gasPrice, nonce }\n    )\n\n    return { executed, transaction }\n  }\n}\n"],"names":["LAMBDA_URL","STOP_LIMIT_ORDER_ADDRESS","ChainId","KOVAN","MATIC","AVALANCHE","FANTOM","ETHEREUM","BSC_TESTNET","DEFAULT_RECEIVER_ADDRESS","ADVANCED_RECEIVER_ADDRESS","LIMIT_ORDER_HELPER_ADDRESS","ROUND_UP_RECEIVER_ADDRESS","OrderStatus","types","EIP712Domain","name","type","LimitOrder","bentoTypes","SetMasterContractApproval","getSignature","message","chainId","privateKey","sign","primaryType","domain","verifyingContract","getTypedData","getTypedDataBento","BENTOBOX_ADDRESS","getTypeHash","typedData","getMessage","toString","SigningKey","signDigest","v","r","s","getSignatureWithProvider","provider","_context","send","maker","JSON","stringify","_splitSignature","splitSignature","getSignatureWithProviderBentobox","_context2","user","_splitSignature2","getSignatureBento","bentoApproval","amountIn","amountOut","recipient","startTime","endTime","stopPrice","oracleAddress","oracleData","this","validateAndParseAddress","getLimitOrder","data","CurrencyAmount","fromRawAmount","Token","tokenIn","tokenInDecimals","tokenInSymbol","tokenOut","tokenOutDecimals","tokenOutSymbol","_proto","usePrice","price","currency","quote","quotient","signdOrderWithPrivatekey","order","tokenInAddress","tokenOutAddress","amountInRaw","amountOutRaw","keccak256","signOrderWithProvider","_yield$getSignatureWi","fetch","method","headers","Content-Type","body","json","key","get","address","decimals","symbol","FillLimitOrder","path","amountExternal","amountToFill","limitOrderReceiver","to","keepTokenIn","map","limitOrderReceiverData","defaultAbiCoder","encode","_proto2","fillOrderOpen","signer","extra","open","fillOrder","gasPrice","nonce","forceExecution","func","orderArg","limitOrderContract","Contract","abi","executed","debug","console","log","_context3","estimateGas","length","gasLimit","mul","div","BigNumber","from","transaction"],"mappings":"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"}